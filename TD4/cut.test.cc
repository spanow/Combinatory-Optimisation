#include "cut.h"
#include "main_utils.h"
#include <algorithm>
#include <string>
#include <sstream>
#include <vector>
using namespace std;

ostream& operator<<(ostream& out, const PricedCut& p) {
  return out << "{" << p.length << ", " << p.price << "}";
};

int main() {
  vector<int> indices;
  {
    cout << "Simple examples." << endl;

    CHECK_NEAR(OptimalCut(10, {{2, 1.0}}, &indices), 5.0, 1e-9);
    cout << "PASSED at line " << __LINE__ << endl;

    CHECK_NEAR(OptimalCut(10, {{2, 2.2}, {1, 0.5}, {6, 10.0}}, &indices),
                          10.0 + 2.2 + 2.2, 1e-9);
    cout << "PASSED at line " << __LINE__ << endl;

    CHECK_NEAR(OptimalCut(13, {{9, 9.9}, {8, 8.7}, {7, 7.5},
                               {2, 2.03}, {3, 3.04}, {4, 4.05}}, &indices),
                          9.9 + 2.03 + 2.03, 1e-9);
    cout << "PASSED at line " << __LINE__ << endl;

    CHECK_NEAR(OptimalCut(13, {{9, 9.009}, {8, 8.007}, {7, 7.005},
                               {2, .11}, {3, .2}, {4, .3}}, &indices),
                          9.009 + .3, 1e-9);
    cout << "PASSED at line " << __LINE__ << endl;

    CHECK_NEAR(OptimalCut(13, {{9, 1.99}, {8, 1.88}, {7, 1.77},
                               {2, .23}, {3, .34}, {4, .45}}, &indices),
                          1.77 + 3 * .23, 1e-9);
    cout << "PASSED at line " << __LINE__ << endl;

    // Example given in the .h
    CHECK_NEAR(OptimalCut(257, {{40, 3.8}, {70, 6.7}, {94, 9.4}}, &indices),
               3.8 * 4 + 9.4, 1e-9);
    cout << "PASSED at line " << __LINE__ << endl;
  }

  {
    cout << "Corner cases." << endl;

    // Longueur nulle.
    CHECK_NEAR(OptimalCut(0, {{3, 1.3}, {4, 1.4}, {5, 1.8}}, &indices), 0.0, 1e-9); 
    cout << "PASSED at line " << __LINE__ << endl;

    // Un seul modele dispo
    CHECK_NEAR(OptimalCut(1000, {{3, 1.0}}, &indices), 333, 1e-9);
    cout << "PASSED at line " << __LINE__ << endl;

    // Zero modeles dispo.
    CHECK_NEAR(OptimalCut(257, {}, &indices), 0, 1e-9);
    cout << "PASSED at line " << __LINE__ << endl;
  }

  int num_trials = 0;
  {
    cout << "Performance + stress test." << endl;
    const int max_num_trials = 1000;
    const double maxt = 1.0;  // 2 seconds.
    Random random(123);
    clock_t c0 = clock();
    clock_t maxc = CLOCKS_PER_SEC * maxt + c0;
    const vector<double> expected = {251.703491037,453.998978159,500.868355169,571.718427557,271.433137525,429.222921086,370.102806042,207.703510105,111.253735669,535.564360318,392.839761524,507.027150118,496.259990766,317.860288389,432.979431565,557.497724067,513.887762509,11.095210718,358.412922769,317.144466614,475.140317159,74.8844605819,508.593260296,135.627597835,520.381070817,402.575951337,434.067676627,251.13961034,109.57861755,316.618617464,321.52213149,554.230633968,317.460635812,481.227051037,511.620429156,521.835277309,317.155108918,444.820620595,360.87481659,547.280336717,408.340440751,257.520927613,308.290462164,243.429489553,463.892141691,222.319708589,106.124077481,502.259746998,63.1439790849,225.283793275,51.8639068399,476.513585802,77.1327279557,477.471563051,248.152650205,506.589952627,213.006266021,316.970399567,275.343327917,563.743336339,266.447337116,547.451472208,464.02755043,225.394199353,394.733355903,244.223018348,288.316150976,369.16243662,524.357428088,146.385763277,424.88055315,576.025807698,274.496000533,392.040614998,563.578089816,237.681390277,116.101726915,169.730041625,513.761903817,460.347187706,267.001613942,571.444658761,425.56663799,369.507377786,351.565011321,117.287432414,360.697119612,147.295628171,449.749963387,294.471389129,459.776302469,170.115491481,463.067612631,490.819232039,397.215494185,324.160868171,261.846002328,437.416064559,364.669165986,494.227507787,283.198217232,96.2895091623,59.5969796451,544.023613703,349.756604442,407.428250775,511.92820977,571.918593642,522.626625993,185.731335138,57.0615337789,566.254649135,330.473065811,112.402480727,388.971989395,328.831996985,436.753371636,273.649044932,416.998200324,544.280675469,382.589003849,122.918384651,510.346413585,501.99210828,232.770882879,237.189105638,549.981619807,577.183298103,349.760021165,459.456648636,570.34129618,281.376009384,549.766274388,563.26049162,351.237402746,544.661322107,87.7755893175,524.183865044,162.732641778,208.615539636,325.077905533,405.008058858,501.771686527,551.367351465,294.060953358,344.91107303,480.499639111,111.922000239,587.234730195,418.598412044,136.16938189,337.761352976,303.698188402,232.049977347,540.72162784,521.868942637,527.08460406,101.977555142,250.367663379,236.422528499,590.712133817,415.120951306,558.129773434,342.035526344,533.187206046,121.800969222,567.685745669,164.101386861,443.118853035,119.925501706,335.709360838,371.672492919,392.644405913,411.353661356,246.486295801,393.485964469,412.952407667,537.870825854,393.353607501,520.556977758,298.325847453,260.415949652,490.053277398,472.330570127,125.585784642,351.583204272,500.578078212,491.530495679,101.350689322,478.627169299,92.6496097741,500.467448674,142.117820125,458.23223656,441.515189812,274.961730185,198.859706161,326.864716349,428.652447166,239.605889313,406.315181858,383.788575221,547.168426299,548.492601,477.412083125,524.303985515,537.619940194,534.754005871,435.217856686,185.073420693,426.262270501,466.772764897,379.801154559,486.471115284,437.082238062,429.664793481,516.656803996,37.8884117666,322.478676036,466.570738086,489.383277146,387.63328292,423.885404322,376.760126929,292.324666516,452.53725074,474.111890757,116.510079308,161.01175511,567.940497699,215.371356927,446.944076851,72.6840841933,406.080037267,173.485400932,525.678584499,472.369762159,35.574866781,159.859881508,426.093379727,167.883397523,232.509307969,402.200187241,271.265741562,546.608954307,121.191801496,479.857016391,262.437228483,500.548246078,382.034310659,296.878971577,536.710344692,421.498206337,168.930090574,94.4280410917,135.031456269,334.781019866,374.816860757,500.065428477,263.219055114,485.298697113,537.336656897,144.982826223,470.356223841,352.392681685,549.84560022,563.781131827,360.876101629,389.551566134,333.032103034,471.851392658,195.425102096,473.840410242,495.371564239,493.539845831,514.245312979,586.745630835,237.136603033,237.231706573,388.862642229,403.285663481,304.106020441,523.801655421,292.569322431,268.767426006,279.590635216,555.44128782,459.168293974,467.574189796,545.892007136,116.705187721,281.698756038,354.314211689,527.974341647,474.695095178,232.31772469,356.879302979,311.417538807,418.025127666,496.54681908,443.880043545,558.598890222,166.604425752,430.315960995,509.85644372,406.614309104,268.928457546,334.565790172,496.255200688,410.617418924,187.918622114,506.670574315,370.698646004,329.67178451,194.798208474,538.315632813,395.879081889,431.331930382,425.041824065,332.891357222,312.22324784,310.246003977,323.919629686,314.490418598,341.303915477,516.697201255,419.57707168,375.145975072,499.337841043,239.019030416,416.959275226,514.33566253,377.815853471,400.093907207,376.226894323,271.389921475,330.39667232,484.005813679,298.641484266,257.997280262,592.210651263,514.307130707,396.273677225,442.683332192,502.264966789,536.755495024,118.830614961,459.475668143,562.870319101,199.814723527,407.787278015,452.047632947,558.761665456,585.145361917,533.27999026,83.3257109725,442.235371073,457.344150759,595.608254743,337.757795612,516.28701179,471.524302785,153.289607093,397.840828893,318.11558022,433.189899794,503.774414874,392.399068492,528.559902969,379.951670794,87.2658141432,291.441573635,348.815329927,182.645179523,173.552508896,46.3951685405,450.334485895,320.54972343,262.668386075,466.127374545,509.628054436,208.372631258,448.31719347,73.4920185555,209.800377434,317.393733666,476.330820359,106.678898272,509.885064905,579.831294293,283.030836696,507.428965854,244.444524127,396.878662964,469.644095892,440.277003986,407.805911356,452.935167164,501.879835584,91.3162694629,508.603690953,158.084027555,410.612090013,182.15632235,477.991540127,523.185465478,429.007106395,505.372461136,491.928361925,470.881193136,417.220834665,340.723878291,159.829022674,446.61224696,278.988930116,179.003751145,298.519133006,292.236620285,575.904547466,148.842587012,51.5343681797,445.337784194,533.209194145,580.023964845,289.667763256,406.432065754,193.196569448,425.960054873,430.300881294,453.848391263,390.613259272,81.9443204945,203.054027821,427.740396079,539.916856277,313.48384935,479.286250336,563.378658031,325.463331648,501.026568672,364.255359109,591.364385288,229.523395584,542.608604906,440.498659672,382.896582005,510.916064394,502.962908952,41.5036558211,456.935806501,431.404717706,531.812180561,474.765239942,523.938722095,327.509297147,249.347659599,491.638741154,566.706887671,429.033198167,555.264074983,312.593723978,343.870913895,363.725908088,492.773984865,489.256301075,355.799555493,67.6762491711,90.6724811718,416.500978929,335.617319385,455.808173882,112.605365299,438.261492469,477.952064637,360.302132221,460.093797951,560.092968995,310.974687395,246.402221843,442.523551104,550.244836901,243.199994464,196.912739606,420.765796719,85.9198401065,239.468381833,170.510339243,127.84400677,507.532367234,315.67814271,268.23294402,470.858389182,132.272623683,281.301252265,264.264308381,159.704647983,134.315112165,392.769719939,534.415243863,546.913987711,366.870055967,425.953971639,46.9198442623,417.212577799,467.600271444,421.413220519,488.016299469,444.293874641,27.3584678397,524.113180894,276.0722802,467.532691971,466.918813126,297.504000143,237.324380082,236.001740148,572.791751993,106.074795039,296.054219794,340.819254448,572.674666539,565.413177229,186.090592464,306.392652998,455.03506174,324.849060864,216.472404338,372.464867428,507.95017002,515.322328567,513.68848763,530.16570237,437.871446069,475.156338994,232.026473504,536.121542719,533.174384991,313.809233656,319.042201556,328.770355668,109.112577248,447.591414815,583.053640509,277.940576822,521.269622027,294.212662129,178.162946309,517.074102261,392.294743424,330.773648302,579.850510387,396.553707324,554.556265357,201.009208926,550.926649099,495.130203596,497.776989341,228.567620643,82.6353956477,115.652411811,361.199699742,473.392357994,167.471096529,283.980004773,534.829571628,496.023846642,268.035431807,227.766929028,295.114615365,201.219902758,260.156146828,229.089448052,503.780768532,421.076086792,377.544984719,510.655608013,229.727326471,262.863021989,277.680797683,332.738355456,295.688381443,389.917608184,158.482338734,570.559078881,280.375069305,404.035012069,149.881760386,264.530531079,326.675688091,290.910374238,499.261110762,362.714759021,372.266488643,434.229424197,303.708324924,513.889906207,542.264565766,384.203476309,488.048784631,370.596944045,446.358752803,376.664097364,346.702854295,386.190956228,347.312639778,405.356774294,487.843906289,483.752451711,32.9095368851,469.331092089,539.417750791,570.252804846,107.249934763,408.04515194,149.589109927,385.449030343,349.76243888,310.37467861,526.9368254,289.173815561,461.601696617,224.264354084,532.614348518,253.101000972,192.800261892,489.482403175,256.652715719,474.881913214,227.218018633,193.499874889,410.878957663,364.225363394,519.786724406,406.135069166,371.067377889,377.055922923,527.138561968,455.97783747,524.907256735,300.502004768,266.874054954,535.671963242,544.810958716,126.087103069,363.023579437,155.411925016,458.557783926,177.255793874,480.768999288,453.314365237,503.309447618,473.478988862,453.138885868,337.103482801,432.665189362,544.473000641,263.716593979,435.593266783,254.045515016,457.441652422,497.203981209,411.18835657,420.024491488,176.555946243,443.26918821,436.708395108,433.731804349,435.357917009,431.647975079,493.187261586,154.524875319,335.462029262,453.970633945,474.41430999,243.02214568,374.806185832,507.012256896,101.497901147,409.825216065,503.075515481,574.41272404,497.632117004,328.564541272,514.426530197,388.40198961,309.477201655,276.268443748,270.440000912,516.163772292,484.388580014,354.70028833,454.818874182,186.569367121,385.336208707,522.067750375,566.44097767,464.657564996,360.651780008,202.767114401,522.329544036,422.744605857,41.1019004728,501.647393415,236.656705361,461.173957404,581.733204343,401.049727462,453.438452692,391.865357655,318.900551779,552.557821623,246.077838871,402.620405278,402.1905985,147.552956283,416.473795203,418.131522026,505.980531706,303.367864643,358.359792783,336.433461935,185.184606143,514.973060047,293.076040092,584.591606772,115.404667583,578.094990557,549.387082007,35.0694996659,330.478299248,310.28420525,494.927694923,143.11312594,503.011254897,585.496799576,360.256924235,520.369412715,234.884500711,354.438330242,534.827723653,70.8183191484,285.236976196,472.605896064,463.199978485,414.56542779,291.159894248,186.692993683,519.040676851,363.130127069,541.540339184,548.465407377,470.078086106,565.746699302,434.584404943,447.76982188,475.111114306,346.568062039,239.197403066,476.140945359,514.208272268,126.497807016,308.793008485,425.651845435,525.441301518,331.333524397,441.379222592,427.779036738,453.601252086,460.462705915,569.887518303,152.492035618,16.0916537989,585.429566689,153.949033835,354.765681047,319.838517298,356.593763104,197.847357489,582.507198093,412.173309131,577.066758114,359.454750465,538.117390806,501.836660707,138.569169493,440.44515446,430.167838631,537.065385622,337.522286392,417.623064544,494.557935427,400.26751296,234.128581036,196.742072242,326.693526978,303.651937223,245.12419889,548.353296053,236.823811958,458.232034175,592.59692386,340.286812442,526.444864803,316.436109418,223.930867153,48.7474026228,469.429222585,172.76156538,367.155699709,466.050453464,108.321232395,334.337695519,252.532670892,164.561942861,336.106908177,288.216123566,402.175795952,372.186565155,126.177275476,363.7314988,558.81498992,52.7983441385,449.933330677,538.135407815,263.602268361,157.924395286,472.439544941,171.132298424,331.545868702,538.918336377,195.580180386,519.609557785,120.118361467,555.954313576,506.234559634,347.733159581,318.531637084,307.398316881,348.214906294,289.69177906,524.127596887,396.997318635,542.882639986,550.875000703,413.069728092,344.959834873,458.517046025,548.923737944,161.627527495,521.444778638,408.742251454,387.252931179,525.819803079,105.040128553,469.332877578,512.008166152,440.151846322,397.541032803,255.420609284,380.016945803,481.883422309,436.076744441,383.743018603,227.554993642,453.026785981,382.062316553,427.781385705,188.575921143,362.527794923,228.442038286,300.631214978,508.191999738,92.7371962401,346.143470879,381.11736297,502.237821746,294.477563523,539.334696051,258.451473942,255.258515066,534.005345701,527.560874321,398.471277739,147.430050996,205.900675223,474.990952184,499.719722336,419.463518819,307.154360966,400.498723859,432.362494878,497.601738305,485.569044408,448.048016956,73.0175322467,376.127385722,403.144422321,387.297107856,565.7795136,554.800360085,461.564371684,448.924197512,355.014814859,216.231282638,373.314989648,515.810380502,431.605963122,562.389998767,425.705908021,234.209572791,573.169611819,516.673544056,564.432994528,339.454705499,532.469788091,513.501256313,289.603573479,200.987926046,458.848252531,524.318565006,452.186385921,525.991099414,240.471778061,163.465355264,200.079841895,352.683455627,486.447342136,509.476199541,226.011794824,400.097995789,244.044624461,113.596033892,214.297620747,270.584535154,565.561829418,374.024913584,118.5818772,344.586871298,577.760608044,339.685606021,347.409150401,406.522180297,180.402179219,350.890899196,569.316979803,296.264511112,393.640241651,282.182348834,466.130013779,451.966730261,192.623525024,513.668647394,485.04067393,518.297409793,441.989768974,256.689756698,528.579974366,374.719308854,301.26428973,491.161229648,397.502138194,470.250550482,285.549000643,278.99443943,430.431305302,247.516194055,412.915085413,380.126669517,537.381347342,442.96864018,138.732755941,446.860828123,409.135364372,351.220721506,407.172609835,247.76802063,501.612830915,350.903088348,331.997742958,144.388115668,391.165001266,506.731178267,487.831462556,554.714439275,249.164124024,155.582994804,423.697498675,383.719261158,501.909285171,359.797434408,252.712787646,383.000555904,422.749117099,379.090151615,167.588861096,280.870049438,389.900723042,484.228782936,467.702675332,371.14012869};
    vector<int> indices;
    cout.precision(12);
    cerr.precision(12);
    while (clock() < maxc) {
      const int L = random.Uniform(10000) + 1;
      const int sL = sqrt(L);
      const int num_cuts = random.Uniform(2*sL) + 1;
      vector<PricedCut> cuts;
      for (int i = 0; i < num_cuts; ++i) {
        cuts.push_back({sL+random.Uniform(sL), 5+random.RandDouble()});
      }
      double x = OptimalCut(L, cuts, &indices);
      if (fabs(x - expected[num_trials]) > 1e-6) {
        cerr << "FAILED at trial #" << num_trials << ": Expected " << expected[num_trials] << ", got " << x << " (difference: " << x - expected[num_trials] << ")."
          << endl;
        cerr << "For L = " << L << endl;
        cerr << "And cuts = " << cuts << endl;
        return 1;
      }
      if (++num_trials >= max_num_trials) break;
    }
    cout << "PASSED at line " << __LINE__ << endl;
    cout << "Time for " << num_trials << " trials: " << double(clock() - c0) / CLOCKS_PER_SEC << " s." << endl;
  }

  {
    cout << "Testing the output to 'cut_indices'" << endl;

    auto OptimalIndices = [](int L, const vector<PricedCut>& cuts) -> string {
      vector<int> indices;
      OptimalCut(L, cuts, &indices);
      return ToStr(CanonicalizeCopy(indices));
    };
    CHECK_EQ(OptimalIndices(10, {{2, 1.0}}), "[0 0 0 0 0]");
    cout << "PASSED at line " << __LINE__ << endl;

    CHECK_EQ(OptimalIndices(10, {{2, 2.2}, {1, 0.5}, {6, 10.0}}),
                          "[0 0 2]");
    cout << "PASSED at line " << __LINE__ << endl;

    CHECK_EQ(OptimalIndices(13, {{9, 9.9}, {8, 8.7}, {7, 7.5},
                               {2, 2.03}, {3, 3.04}, {4, 4.05}}),
                            "[0 3 3]");
    cout << "PASSED at line " << __LINE__ << endl;

    CHECK_EQ(OptimalIndices(13, {{9, 9.009}, {8, 8.007}, {7, 7.005},
                               {2, .11}, {3, .2}, {4, .3}}),
                            "[0 5]");
    cout << "PASSED at line " << __LINE__ << endl;

    CHECK_EQ(OptimalIndices(13, {{9, 1.99}, {8, 1.88}, {7, 1.77},
                               {2, .23}, {3, .34}, {4, .45}}),
                            "[2 3 3 3]");
    cout << "PASSED at line " << __LINE__ << endl;

    // Example given in the .h
    CHECK_EQ(OptimalIndices(257, {{40, 3.8}, {70, 6.7}, {94, 9.4}}),
             "[0 0 0 0 2]");
    cout << "PASSED at line " << __LINE__ << endl;
  }

  if (num_trials > 500) {
    cout << "NICE! Complexity is probably linear!" << endl;
  } else if (num_trials > 10) {
    cout << "NOT IDEAL: The complexity is probably quadratic. That's good, but you can do better!" << endl;
  } else {
    cout << "SLOW: The complexity seems exponential... Try again!" << endl;
  }
}
